<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1094" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1077.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1077.00"> </text><svg id="frames" x="10" width="1180" total_samples="130"><g><title>[unknown] (67 samples, 51.54%)</title><rect x="0.7692%" y="997" width="51.5385%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="67"/><text x="1.0192%" y="1007.50">[unknown]</text></g><g><title>[unknown] (63 samples, 48.46%)</title><rect x="3.8462%" y="981" width="48.4615%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="63"/><text x="4.0962%" y="991.50">[unknown]</text></g><g><title>[unknown] (63 samples, 48.46%)</title><rect x="3.8462%" y="965" width="48.4615%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="63"/><text x="4.0962%" y="975.50">[unknown]</text></g><g><title>[unknown] (63 samples, 48.46%)</title><rect x="3.8462%" y="949" width="48.4615%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="63"/><text x="4.0962%" y="959.50">[unknown]</text></g><g><title>[unknown] (63 samples, 48.46%)</title><rect x="3.8462%" y="933" width="48.4615%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="63"/><text x="4.0962%" y="943.50">[unknown]</text></g><g><title>[unknown] (63 samples, 48.46%)</title><rect x="3.8462%" y="917" width="48.4615%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="63"/><text x="4.0962%" y="927.50">[unknown]</text></g><g><title>[unknown] (3 samples, 2.31%)</title><rect x="50.0000%" y="901" width="2.3077%" height="15" fill="rgb(207,160,47)" fg:x="65" fg:w="3"/><text x="50.2500%" y="911.50">[..</text></g><g><title>[unknown] (3 samples, 2.31%)</title><rect x="50.0000%" y="885" width="2.3077%" height="15" fill="rgb(228,23,34)" fg:x="65" fg:w="3"/><text x="50.2500%" y="895.50">[..</text></g><g><title>[unknown] (2 samples, 1.54%)</title><rect x="50.7692%" y="869" width="1.5385%" height="15" fill="rgb(218,30,26)" fg:x="66" fg:w="2"/><text x="51.0192%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="51.5385%" y="853" width="0.7692%" height="15" fill="rgb(220,122,19)" fg:x="67" fg:w="1"/><text x="51.7885%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="51.5385%" y="837" width="0.7692%" height="15" fill="rgb(250,228,42)" fg:x="67" fg:w="1"/><text x="51.7885%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="51.5385%" y="821" width="0.7692%" height="15" fill="rgb(240,193,28)" fg:x="67" fg:w="1"/><text x="51.7885%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="51.5385%" y="805" width="0.7692%" height="15" fill="rgb(216,20,37)" fg:x="67" fg:w="1"/><text x="51.7885%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="51.5385%" y="789" width="0.7692%" height="15" fill="rgb(206,188,39)" fg:x="67" fg:w="1"/><text x="51.7885%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="51.5385%" y="773" width="0.7692%" height="15" fill="rgb(217,207,13)" fg:x="67" fg:w="1"/><text x="51.7885%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="51.5385%" y="757" width="0.7692%" height="15" fill="rgb(231,73,38)" fg:x="67" fg:w="1"/><text x="51.7885%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="51.5385%" y="741" width="0.7692%" height="15" fill="rgb(225,20,46)" fg:x="67" fg:w="1"/><text x="51.7885%" y="751.50"></text></g><g><title>&lt;sha2::core_api::Sha256VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core::{{closure}} (2 samples, 1.54%)</title><rect x="52.3077%" y="661" width="1.5385%" height="15" fill="rgb(210,31,41)" fg:x="68" fg:w="2"/><text x="52.5577%" y="671.50"></text></g><g><title>sha2::sha256::soft::compress (2 samples, 1.54%)</title><rect x="52.3077%" y="645" width="1.5385%" height="15" fill="rgb(221,200,47)" fg:x="68" fg:w="2"/><text x="52.5577%" y="655.50"></text></g><g><title>sha2::sha256::soft::sha256_digest_block_u32 (2 samples, 1.54%)</title><rect x="52.3077%" y="629" width="1.5385%" height="15" fill="rgb(226,26,5)" fg:x="68" fg:w="2"/><text x="52.5577%" y="639.50"></text></g><g><title>sha2::sha256::soft::sha256_digest_round_x2 (2 samples, 1.54%)</title><rect x="52.3077%" y="613" width="1.5385%" height="15" fill="rgb(249,33,26)" fg:x="68" fg:w="2"/><text x="52.5577%" y="623.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (2 samples, 1.54%)</title><rect x="52.3077%" y="597" width="1.5385%" height="15" fill="rgb(235,183,28)" fg:x="68" fg:w="2"/><text x="52.5577%" y="607.50"></text></g><g><title>&lt;T as digest::mac::Mac&gt;::finalize (3 samples, 2.31%)</title><rect x="52.3077%" y="789" width="2.3077%" height="15" fill="rgb(221,5,38)" fg:x="68" fg:w="3"/><text x="52.5577%" y="799.50">&lt;..</text></g><g><title>digest::FixedOutput::finalize_fixed (3 samples, 2.31%)</title><rect x="52.3077%" y="773" width="2.3077%" height="15" fill="rgb(247,18,42)" fg:x="68" fg:w="3"/><text x="52.5577%" y="783.50">d..</text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (3 samples, 2.31%)</title><rect x="52.3077%" y="757" width="2.3077%" height="15" fill="rgb(241,131,45)" fg:x="68" fg:w="3"/><text x="52.5577%" y="767.50">&lt;..</text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (3 samples, 2.31%)</title><rect x="52.3077%" y="741" width="2.3077%" height="15" fill="rgb(249,31,29)" fg:x="68" fg:w="3"/><text x="52.5577%" y="751.50">&lt;..</text></g><g><title>&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;T,OutSize,O&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (3 samples, 2.31%)</title><rect x="52.3077%" y="725" width="2.3077%" height="15" fill="rgb(225,111,53)" fg:x="68" fg:w="3"/><text x="52.5577%" y="735.50">&lt;..</text></g><g><title>&lt;sha2::core_api::Sha256VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core (3 samples, 2.31%)</title><rect x="52.3077%" y="709" width="2.3077%" height="15" fill="rgb(238,160,17)" fg:x="68" fg:w="3"/><text x="52.5577%" y="719.50">&lt;..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len64_padding_be (3 samples, 2.31%)</title><rect x="52.3077%" y="693" width="2.3077%" height="15" fill="rgb(214,148,48)" fg:x="68" fg:w="3"/><text x="52.5577%" y="703.50">b..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::digest_pad (3 samples, 2.31%)</title><rect x="52.3077%" y="677" width="2.3077%" height="15" fill="rgb(232,36,49)" fg:x="68" fg:w="3"/><text x="52.5577%" y="687.50">b..</text></g><g><title>sha2::sha256::soft::compress (1 samples, 0.77%)</title><rect x="53.8462%" y="661" width="0.7692%" height="15" fill="rgb(209,103,24)" fg:x="70" fg:w="1"/><text x="54.0962%" y="671.50"></text></g><g><title>sha2::sha256::soft::sha256_digest_block_u32 (1 samples, 0.77%)</title><rect x="53.8462%" y="645" width="0.7692%" height="15" fill="rgb(229,88,8)" fg:x="70" fg:w="1"/><text x="54.0962%" y="655.50"></text></g><g><title>sha2::sha256::soft::sha256_digest_round_x2 (1 samples, 0.77%)</title><rect x="53.8462%" y="629" width="0.7692%" height="15" fill="rgb(213,181,19)" fg:x="70" fg:w="1"/><text x="54.0962%" y="639.50"></text></g><g><title>sha2::sha256::soft::schedule (1 samples, 0.77%)</title><rect x="54.6154%" y="677" width="0.7692%" height="15" fill="rgb(254,191,54)" fg:x="71" fg:w="1"/><text x="54.8654%" y="687.50"></text></g><g><title>sha2::sha256::soft::sha256msg2 (1 samples, 0.77%)</title><rect x="54.6154%" y="661" width="0.7692%" height="15" fill="rgb(241,83,37)" fg:x="71" fg:w="1"/><text x="54.8654%" y="671.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_right (1 samples, 0.77%)</title><rect x="54.6154%" y="645" width="0.7692%" height="15" fill="rgb(233,36,39)" fg:x="71" fg:w="1"/><text x="54.8654%" y="655.50"></text></g><g><title>sqlx_core::postgres::connection::sasl::hi (5 samples, 3.85%)</title><rect x="52.3077%" y="805" width="3.8462%" height="15" fill="rgb(226,3,54)" fg:x="68" fg:w="5"/><text x="52.5577%" y="815.50">sqlx..</text></g><g><title>&lt;T as digest::mac::Mac&gt;::new_from_slice (2 samples, 1.54%)</title><rect x="54.6154%" y="789" width="1.5385%" height="15" fill="rgb(245,192,40)" fg:x="71" fg:w="2"/><text x="54.8654%" y="799.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as crypto_common::KeyInit&gt;::new_from_slice (2 samples, 1.54%)</title><rect x="54.6154%" y="773" width="1.5385%" height="15" fill="rgb(238,167,29)" fg:x="71" fg:w="2"/><text x="54.8654%" y="783.50"></text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as crypto_common::KeyInit&gt;::new_from_slice (2 samples, 1.54%)</title><rect x="54.6154%" y="757" width="1.5385%" height="15" fill="rgb(232,182,51)" fg:x="71" fg:w="2"/><text x="54.8654%" y="767.50"></text></g><g><title>&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;T,OutSize,O&gt; as digest::core_api::UpdateCore&gt;::update_blocks (2 samples, 1.54%)</title><rect x="54.6154%" y="741" width="1.5385%" height="15" fill="rgb(231,60,39)" fg:x="71" fg:w="2"/><text x="54.8654%" y="751.50"></text></g><g><title>&lt;sha2::core_api::Sha256VarCore as digest::core_api::UpdateCore&gt;::update_blocks (2 samples, 1.54%)</title><rect x="54.6154%" y="725" width="1.5385%" height="15" fill="rgb(208,69,12)" fg:x="71" fg:w="2"/><text x="54.8654%" y="735.50"></text></g><g><title>sha2::sha256::soft::compress (2 samples, 1.54%)</title><rect x="54.6154%" y="709" width="1.5385%" height="15" fill="rgb(235,93,37)" fg:x="71" fg:w="2"/><text x="54.8654%" y="719.50"></text></g><g><title>sha2::sha256::soft::sha256_digest_block_u32 (2 samples, 1.54%)</title><rect x="54.6154%" y="693" width="1.5385%" height="15" fill="rgb(213,116,39)" fg:x="71" fg:w="2"/><text x="54.8654%" y="703.50"></text></g><g><title>sha2::sha256::soft::sha256_digest_round_x2 (1 samples, 0.77%)</title><rect x="55.3846%" y="677" width="0.7692%" height="15" fill="rgb(222,207,29)" fg:x="72" fg:w="1"/><text x="55.6346%" y="687.50"></text></g><g><title>db::db_connect::{{closure}} (6 samples, 4.62%)</title><rect x="52.3077%" y="997" width="4.6154%" height="15" fill="rgb(206,96,30)" fg:x="68" fg:w="6"/><text x="52.5577%" y="1007.50">db::d..</text></g><g><title>sea_orm::database::Database::connect::{{closure}} (6 samples, 4.62%)</title><rect x="52.3077%" y="981" width="4.6154%" height="15" fill="rgb(218,138,4)" fg:x="68" fg:w="6"/><text x="52.5577%" y="991.50">sea_o..</text></g><g><title>sea_orm::database::Database::connect::{{closure}}::{{closure}} (6 samples, 4.62%)</title><rect x="52.3077%" y="965" width="4.6154%" height="15" fill="rgb(250,191,14)" fg:x="68" fg:w="6"/><text x="52.5577%" y="975.50">sea_o..</text></g><g><title>sea_orm::driver::sqlx_postgres::SqlxPostgresConnector::connect::{{closure}} (6 samples, 4.62%)</title><rect x="52.3077%" y="949" width="4.6154%" height="15" fill="rgb(239,60,40)" fg:x="68" fg:w="6"/><text x="52.5577%" y="959.50">sea_o..</text></g><g><title>sea_orm::driver::sqlx_postgres::SqlxPostgresConnector::connect::{{closure}}::{{closure}} (6 samples, 4.62%)</title><rect x="52.3077%" y="933" width="4.6154%" height="15" fill="rgb(206,27,48)" fg:x="68" fg:w="6"/><text x="52.5577%" y="943.50">sea_o..</text></g><g><title>sqlx_core::pool::options::PoolOptions&lt;DB&gt;::connect_with::{{closure}} (6 samples, 4.62%)</title><rect x="52.3077%" y="917" width="4.6154%" height="15" fill="rgb(225,35,8)" fg:x="68" fg:w="6"/><text x="52.5577%" y="927.50">sqlx_..</text></g><g><title>sqlx_core::pool::inner::PoolInner&lt;DB&gt;::try_min_connections::{{closure}} (6 samples, 4.62%)</title><rect x="52.3077%" y="901" width="4.6154%" height="15" fill="rgb(250,213,24)" fg:x="68" fg:w="6"/><text x="52.5577%" y="911.50">sqlx_..</text></g><g><title>sqlx_core::pool::inner::PoolInner&lt;DB&gt;::connect::{{closure}} (6 samples, 4.62%)</title><rect x="52.3077%" y="885" width="4.6154%" height="15" fill="rgb(247,123,22)" fg:x="68" fg:w="6"/><text x="52.5577%" y="895.50">sqlx_..</text></g><g><title>&lt;tokio::time::timeout::Timeout&lt;T&gt; as core::future::future::Future&gt;::poll (6 samples, 4.62%)</title><rect x="52.3077%" y="869" width="4.6154%" height="15" fill="rgb(231,138,38)" fg:x="68" fg:w="6"/><text x="52.5577%" y="879.50">&lt;toki..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (6 samples, 4.62%)</title><rect x="52.3077%" y="853" width="4.6154%" height="15" fill="rgb(231,145,46)" fg:x="68" fg:w="6"/><text x="52.5577%" y="863.50">&lt;core..</text></g><g><title>sqlx_core::postgres::connection::establish::&lt;impl sqlx_core::postgres::connection::PgConnection&gt;::establish::{{closure}} (6 samples, 4.62%)</title><rect x="52.3077%" y="837" width="4.6154%" height="15" fill="rgb(251,118,11)" fg:x="68" fg:w="6"/><text x="52.5577%" y="847.50">sqlx_..</text></g><g><title>sqlx_core::postgres::connection::sasl::authenticate::{{closure}} (6 samples, 4.62%)</title><rect x="52.3077%" y="821" width="4.6154%" height="15" fill="rgb(217,147,25)" fg:x="68" fg:w="6"/><text x="52.5577%" y="831.50">sqlx_..</text></g><g><title>sqlx_core::postgres::connection::stream::PgStream::recv_expect::{{closure}} (1 samples, 0.77%)</title><rect x="56.1538%" y="805" width="0.7692%" height="15" fill="rgb(247,81,37)" fg:x="73" fg:w="1"/><text x="56.4038%" y="815.50"></text></g><g><title>sqlx_core::postgres::message::Message::decode (1 samples, 0.77%)</title><rect x="56.1538%" y="789" width="0.7692%" height="15" fill="rgb(209,12,38)" fg:x="73" fg:w="1"/><text x="56.4038%" y="799.50"></text></g><g><title>sqlx_core::io::decode::Decode::decode (1 samples, 0.77%)</title><rect x="56.1538%" y="773" width="0.7692%" height="15" fill="rgb(227,1,9)" fg:x="73" fg:w="1"/><text x="56.4038%" y="783.50"></text></g><g><title>&lt;sqlx_core::postgres::message::authentication::Authentication as sqlx_core::io::decode::Decode&gt;::decode_with (1 samples, 0.77%)</title><rect x="56.1538%" y="757" width="0.7692%" height="15" fill="rgb(248,47,43)" fg:x="73" fg:w="1"/><text x="56.4038%" y="767.50"></text></g><g><title>sqlx_core::io::decode::Decode::decode (1 samples, 0.77%)</title><rect x="56.1538%" y="741" width="0.7692%" height="15" fill="rgb(221,10,30)" fg:x="73" fg:w="1"/><text x="56.4038%" y="751.50"></text></g><g><title>&lt;sqlx_core::postgres::message::authentication::AuthenticationSaslFinal as sqlx_core::io::decode::Decode&gt;::decode_with (1 samples, 0.77%)</title><rect x="56.1538%" y="725" width="0.7692%" height="15" fill="rgb(210,229,1)" fg:x="73" fg:w="1"/><text x="56.4038%" y="735.50"></text></g><g><title>base64::decode::decode (1 samples, 0.77%)</title><rect x="56.1538%" y="709" width="0.7692%" height="15" fill="rgb(222,148,37)" fg:x="73" fg:w="1"/><text x="56.4038%" y="719.50"></text></g><g><title>base64::decode::decode_config (1 samples, 0.77%)</title><rect x="56.1538%" y="693" width="0.7692%" height="15" fill="rgb(234,67,33)" fg:x="73" fg:w="1"/><text x="56.4038%" y="703.50"></text></g><g><title>base64::decode::decode_config_buf (1 samples, 0.77%)</title><rect x="56.1538%" y="677" width="0.7692%" height="15" fill="rgb(247,98,35)" fg:x="73" fg:w="1"/><text x="56.4038%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (1 samples, 0.77%)</title><rect x="56.1538%" y="661" width="0.7692%" height="15" fill="rgb(247,138,52)" fg:x="73" fg:w="1"/><text x="56.4038%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.77%)</title><rect x="56.1538%" y="645" width="0.7692%" height="15" fill="rgb(213,79,30)" fg:x="73" fg:w="1"/><text x="56.4038%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.77%)</title><rect x="56.1538%" y="629" width="0.7692%" height="15" fill="rgb(246,177,23)" fg:x="73" fg:w="1"/><text x="56.4038%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.77%)</title><rect x="56.1538%" y="613" width="0.7692%" height="15" fill="rgb(230,62,27)" fg:x="73" fg:w="1"/><text x="56.4038%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.77%)</title><rect x="56.1538%" y="597" width="0.7692%" height="15" fill="rgb(216,154,8)" fg:x="73" fg:w="1"/><text x="56.4038%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.77%)</title><rect x="56.1538%" y="581" width="0.7692%" height="15" fill="rgb(244,35,45)" fg:x="73" fg:w="1"/><text x="56.4038%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.77%)</title><rect x="56.1538%" y="565" width="0.7692%" height="15" fill="rgb(251,115,12)" fg:x="73" fg:w="1"/><text x="56.4038%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.77%)</title><rect x="56.1538%" y="549" width="0.7692%" height="15" fill="rgb(240,54,50)" fg:x="73" fg:w="1"/><text x="56.4038%" y="559.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.77%)</title><rect x="56.1538%" y="533" width="0.7692%" height="15" fill="rgb(233,84,52)" fg:x="73" fg:w="1"/><text x="56.4038%" y="543.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.77%)</title><rect x="56.1538%" y="517" width="0.7692%" height="15" fill="rgb(207,117,47)" fg:x="73" fg:w="1"/><text x="56.4038%" y="527.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.77%)</title><rect x="56.1538%" y="501" width="0.7692%" height="15" fill="rgb(249,43,39)" fg:x="73" fg:w="1"/><text x="56.4038%" y="511.50"></text></g><g><title>_int_realloc (1 samples, 0.77%)</title><rect x="56.1538%" y="485" width="0.7692%" height="15" fill="rgb(209,38,44)" fg:x="73" fg:w="1"/><text x="56.4038%" y="495.50"></text></g><g><title>[libc.so.6] (1 samples, 0.77%)</title><rect x="56.1538%" y="469" width="0.7692%" height="15" fill="rgb(236,212,23)" fg:x="73" fg:w="1"/><text x="56.4038%" y="479.50"></text></g><g><title>[unknown] (80 samples, 61.54%)</title><rect x="0.0000%" y="1013" width="61.5385%" height="15" fill="rgb(242,79,21)" fg:x="0" fg:w="80"/><text x="0.2500%" y="1023.50">[unknown]</text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (6 samples, 4.62%)</title><rect x="56.9231%" y="997" width="4.6154%" height="15" fill="rgb(211,96,35)" fg:x="74" fg:w="6"/><text x="57.1731%" y="1007.50">tokio..</text></g><g><title>tokio::runtime::context::BlockingRegionGuard::block_on (6 samples, 4.62%)</title><rect x="56.9231%" y="981" width="4.6154%" height="15" fill="rgb(253,215,40)" fg:x="74" fg:w="6"/><text x="57.1731%" y="991.50">tokio..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (6 samples, 4.62%)</title><rect x="56.9231%" y="965" width="4.6154%" height="15" fill="rgb(211,81,21)" fg:x="74" fg:w="6"/><text x="57.1731%" y="975.50">tokio..</text></g><g><title>tokio::runtime::park::Inner::park (6 samples, 4.62%)</title><rect x="56.9231%" y="949" width="4.6154%" height="15" fill="rgb(208,190,38)" fg:x="74" fg:w="6"/><text x="57.1731%" y="959.50">tokio..</text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (6 samples, 4.62%)</title><rect x="56.9231%" y="933" width="4.6154%" height="15" fill="rgb(235,213,38)" fg:x="74" fg:w="6"/><text x="57.1731%" y="943.50">tokio..</text></g><g><title>parking_lot::condvar::Condvar::wait (6 samples, 4.62%)</title><rect x="56.9231%" y="917" width="4.6154%" height="15" fill="rgb(237,122,38)" fg:x="74" fg:w="6"/><text x="57.1731%" y="927.50">parki..</text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (6 samples, 4.62%)</title><rect x="56.9231%" y="901" width="4.6154%" height="15" fill="rgb(244,218,35)" fg:x="74" fg:w="6"/><text x="57.1731%" y="911.50">parki..</text></g><g><title>parking_lot_core::parking_lot::park (6 samples, 4.62%)</title><rect x="56.9231%" y="885" width="4.6154%" height="15" fill="rgb(240,68,47)" fg:x="74" fg:w="6"/><text x="57.1731%" y="895.50">parki..</text></g><g><title>parking_lot_core::parking_lot::with_thread_data (6 samples, 4.62%)</title><rect x="56.9231%" y="869" width="4.6154%" height="15" fill="rgb(210,16,53)" fg:x="74" fg:w="6"/><text x="57.1731%" y="879.50">parki..</text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (6 samples, 4.62%)</title><rect x="56.9231%" y="853" width="4.6154%" height="15" fill="rgb(235,124,12)" fg:x="74" fg:w="6"/><text x="57.1731%" y="863.50">parki..</text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (6 samples, 4.62%)</title><rect x="56.9231%" y="837" width="4.6154%" height="15" fill="rgb(224,169,11)" fg:x="74" fg:w="6"/><text x="57.1731%" y="847.50">&lt;park..</text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (6 samples, 4.62%)</title><rect x="56.9231%" y="821" width="4.6154%" height="15" fill="rgb(250,166,2)" fg:x="74" fg:w="6"/><text x="57.1731%" y="831.50">parki..</text></g><g><title>syscall (6 samples, 4.62%)</title><rect x="56.9231%" y="805" width="4.6154%" height="15" fill="rgb(242,216,29)" fg:x="74" fg:w="6"/><text x="57.1731%" y="815.50">sysca..</text></g><g><title>[unknown] (6 samples, 4.62%)</title><rect x="56.9231%" y="789" width="4.6154%" height="15" fill="rgb(230,116,27)" fg:x="74" fg:w="6"/><text x="57.1731%" y="799.50">[unkn..</text></g><g><title>[unknown] (6 samples, 4.62%)</title><rect x="56.9231%" y="773" width="4.6154%" height="15" fill="rgb(228,99,48)" fg:x="74" fg:w="6"/><text x="57.1731%" y="783.50">[unkn..</text></g><g><title>[unknown] (6 samples, 4.62%)</title><rect x="56.9231%" y="757" width="4.6154%" height="15" fill="rgb(253,11,6)" fg:x="74" fg:w="6"/><text x="57.1731%" y="767.50">[unkn..</text></g><g><title>[unknown] (6 samples, 4.62%)</title><rect x="56.9231%" y="741" width="4.6154%" height="15" fill="rgb(247,143,39)" fg:x="74" fg:w="6"/><text x="57.1731%" y="751.50">[unkn..</text></g><g><title>[unknown] (6 samples, 4.62%)</title><rect x="56.9231%" y="725" width="4.6154%" height="15" fill="rgb(236,97,10)" fg:x="74" fg:w="6"/><text x="57.1731%" y="735.50">[unkn..</text></g><g><title>[unknown] (6 samples, 4.62%)</title><rect x="56.9231%" y="709" width="4.6154%" height="15" fill="rgb(233,208,19)" fg:x="74" fg:w="6"/><text x="57.1731%" y="719.50">[unkn..</text></g><g><title>[unknown] (6 samples, 4.62%)</title><rect x="56.9231%" y="693" width="4.6154%" height="15" fill="rgb(216,164,2)" fg:x="74" fg:w="6"/><text x="57.1731%" y="703.50">[unkn..</text></g><g><title>[unknown] (6 samples, 4.62%)</title><rect x="56.9231%" y="677" width="4.6154%" height="15" fill="rgb(220,129,5)" fg:x="74" fg:w="6"/><text x="57.1731%" y="687.50">[unkn..</text></g><g><title>[unknown] (6 samples, 4.62%)</title><rect x="56.9231%" y="661" width="4.6154%" height="15" fill="rgb(242,17,10)" fg:x="74" fg:w="6"/><text x="57.1731%" y="671.50">[unkn..</text></g><g><title>[unknown] (6 samples, 4.62%)</title><rect x="56.9231%" y="645" width="4.6154%" height="15" fill="rgb(242,107,0)" fg:x="74" fg:w="6"/><text x="57.1731%" y="655.50">[unkn..</text></g><g><title>[unknown] (6 samples, 4.62%)</title><rect x="56.9231%" y="629" width="4.6154%" height="15" fill="rgb(251,28,31)" fg:x="74" fg:w="6"/><text x="57.1731%" y="639.50">[unkn..</text></g><g><title>[unknown] (6 samples, 4.62%)</title><rect x="56.9231%" y="613" width="4.6154%" height="15" fill="rgb(233,223,10)" fg:x="74" fg:w="6"/><text x="57.1731%" y="623.50">[unkn..</text></g><g><title>[unknown] (6 samples, 4.62%)</title><rect x="56.9231%" y="597" width="4.6154%" height="15" fill="rgb(215,21,27)" fg:x="74" fg:w="6"/><text x="57.1731%" y="607.50">[unkn..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.77%)</title><rect x="61.5385%" y="965" width="0.7692%" height="15" fill="rgb(232,23,21)" fg:x="80" fg:w="1"/><text x="61.7885%" y="975.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.77%)</title><rect x="61.5385%" y="949" width="0.7692%" height="15" fill="rgb(244,5,23)" fg:x="80" fg:w="1"/><text x="61.7885%" y="959.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.77%)</title><rect x="61.5385%" y="933" width="0.7692%" height="15" fill="rgb(226,81,46)" fg:x="80" fg:w="1"/><text x="61.7885%" y="943.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (1 samples, 0.77%)</title><rect x="61.5385%" y="917" width="0.7692%" height="15" fill="rgb(247,70,30)" fg:x="80" fg:w="1"/><text x="61.7885%" y="927.50"></text></g><g><title>std::sys::unix::thread::Thread::set_name (1 samples, 0.77%)</title><rect x="61.5385%" y="901" width="0.7692%" height="15" fill="rgb(212,68,19)" fg:x="80" fg:w="1"/><text x="61.7885%" y="911.50"></text></g><g><title>std::sys::unix::thread::truncate_cstr (1 samples, 0.77%)</title><rect x="61.5385%" y="885" width="0.7692%" height="15" fill="rgb(240,187,13)" fg:x="80" fg:w="1"/><text x="61.7885%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.77%)</title><rect x="61.5385%" y="869" width="0.7692%" height="15" fill="rgb(223,113,26)" fg:x="80" fg:w="1"/><text x="61.7885%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.77%)</title><rect x="61.5385%" y="853" width="0.7692%" height="15" fill="rgb(206,192,2)" fg:x="80" fg:w="1"/><text x="61.7885%" y="863.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.77%)</title><rect x="61.5385%" y="837" width="0.7692%" height="15" fill="rgb(241,108,4)" fg:x="80" fg:w="1"/><text x="61.7885%" y="847.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.77%)</title><rect x="61.5385%" y="821" width="0.7692%" height="15" fill="rgb(247,173,49)" fg:x="80" fg:w="1"/><text x="61.7885%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.77%)</title><rect x="61.5385%" y="805" width="0.7692%" height="15" fill="rgb(224,114,35)" fg:x="80" fg:w="1"/><text x="61.7885%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.77%)</title><rect x="61.5385%" y="789" width="0.7692%" height="15" fill="rgb(245,159,27)" fg:x="80" fg:w="1"/><text x="61.7885%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.77%)</title><rect x="61.5385%" y="773" width="0.7692%" height="15" fill="rgb(245,172,44)" fg:x="80" fg:w="1"/><text x="61.7885%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.77%)</title><rect x="61.5385%" y="757" width="0.7692%" height="15" fill="rgb(236,23,11)" fg:x="80" fg:w="1"/><text x="61.7885%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.77%)</title><rect x="61.5385%" y="741" width="0.7692%" height="15" fill="rgb(205,117,38)" fg:x="80" fg:w="1"/><text x="61.7885%" y="751.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.77%)</title><rect x="61.5385%" y="725" width="0.7692%" height="15" fill="rgb(237,72,25)" fg:x="80" fg:w="1"/><text x="61.7885%" y="735.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.77%)</title><rect x="61.5385%" y="709" width="0.7692%" height="15" fill="rgb(244,70,9)" fg:x="80" fg:w="1"/><text x="61.7885%" y="719.50"></text></g><g><title>tcache_init (1 samples, 0.77%)</title><rect x="61.5385%" y="693" width="0.7692%" height="15" fill="rgb(217,125,39)" fg:x="80" fg:w="1"/><text x="61.7885%" y="703.50"></text></g><g><title>tcache_init (1 samples, 0.77%)</title><rect x="61.5385%" y="677" width="0.7692%" height="15" fill="rgb(235,36,10)" fg:x="80" fg:w="1"/><text x="61.7885%" y="687.50"></text></g><g><title>arena_get2 (1 samples, 0.77%)</title><rect x="61.5385%" y="661" width="0.7692%" height="15" fill="rgb(251,123,47)" fg:x="80" fg:w="1"/><text x="61.7885%" y="671.50"></text></g><g><title>arena_get2 (1 samples, 0.77%)</title><rect x="61.5385%" y="645" width="0.7692%" height="15" fill="rgb(221,13,13)" fg:x="80" fg:w="1"/><text x="61.7885%" y="655.50"></text></g><g><title>_int_new_arena (1 samples, 0.77%)</title><rect x="61.5385%" y="629" width="0.7692%" height="15" fill="rgb(238,131,9)" fg:x="80" fg:w="1"/><text x="61.7885%" y="639.50"></text></g><g><title>new_heap (1 samples, 0.77%)</title><rect x="61.5385%" y="613" width="0.7692%" height="15" fill="rgb(211,50,8)" fg:x="80" fg:w="1"/><text x="61.7885%" y="623.50"></text></g><g><title>alloc_new_heap (1 samples, 0.77%)</title><rect x="61.5385%" y="597" width="0.7692%" height="15" fill="rgb(245,182,24)" fg:x="80" fg:w="1"/><text x="61.7885%" y="607.50"></text></g><g><title>__GI___munmap (1 samples, 0.77%)</title><rect x="61.5385%" y="581" width="0.7692%" height="15" fill="rgb(242,14,37)" fg:x="80" fg:w="1"/><text x="61.7885%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="61.5385%" y="565" width="0.7692%" height="15" fill="rgb(246,228,12)" fg:x="80" fg:w="1"/><text x="61.7885%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="61.5385%" y="549" width="0.7692%" height="15" fill="rgb(213,55,15)" fg:x="80" fg:w="1"/><text x="61.7885%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="61.5385%" y="533" width="0.7692%" height="15" fill="rgb(209,9,3)" fg:x="80" fg:w="1"/><text x="61.7885%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="61.5385%" y="517" width="0.7692%" height="15" fill="rgb(230,59,30)" fg:x="80" fg:w="1"/><text x="61.7885%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="61.5385%" y="501" width="0.7692%" height="15" fill="rgb(209,121,21)" fg:x="80" fg:w="1"/><text x="61.7885%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="61.5385%" y="485" width="0.7692%" height="15" fill="rgb(220,109,13)" fg:x="80" fg:w="1"/><text x="61.7885%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="61.5385%" y="469" width="0.7692%" height="15" fill="rgb(232,18,1)" fg:x="80" fg:w="1"/><text x="61.7885%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="61.5385%" y="453" width="0.7692%" height="15" fill="rgb(215,41,42)" fg:x="80" fg:w="1"/><text x="61.7885%" y="463.50"></text></g><g><title>__GI___mmap64 (3 samples, 2.31%)</title><rect x="62.3077%" y="901" width="2.3077%" height="15" fill="rgb(224,123,36)" fg:x="81" fg:w="3"/><text x="62.5577%" y="911.50">_..</text></g><g><title>__GI___mmap64 (3 samples, 2.31%)</title><rect x="62.3077%" y="885" width="2.3077%" height="15" fill="rgb(240,125,3)" fg:x="81" fg:w="3"/><text x="62.5577%" y="895.50">_..</text></g><g><title>[unknown] (3 samples, 2.31%)</title><rect x="62.3077%" y="869" width="2.3077%" height="15" fill="rgb(205,98,50)" fg:x="81" fg:w="3"/><text x="62.5577%" y="879.50">[..</text></g><g><title>[unknown] (3 samples, 2.31%)</title><rect x="62.3077%" y="853" width="2.3077%" height="15" fill="rgb(205,185,37)" fg:x="81" fg:w="3"/><text x="62.5577%" y="863.50">[..</text></g><g><title>[unknown] (3 samples, 2.31%)</title><rect x="62.3077%" y="837" width="2.3077%" height="15" fill="rgb(238,207,15)" fg:x="81" fg:w="3"/><text x="62.5577%" y="847.50">[..</text></g><g><title>[unknown] (3 samples, 2.31%)</title><rect x="62.3077%" y="821" width="2.3077%" height="15" fill="rgb(213,199,42)" fg:x="81" fg:w="3"/><text x="62.5577%" y="831.50">[..</text></g><g><title>[unknown] (3 samples, 2.31%)</title><rect x="62.3077%" y="805" width="2.3077%" height="15" fill="rgb(235,201,11)" fg:x="81" fg:w="3"/><text x="62.5577%" y="815.50">[..</text></g><g><title>[unknown] (3 samples, 2.31%)</title><rect x="62.3077%" y="789" width="2.3077%" height="15" fill="rgb(207,46,11)" fg:x="81" fg:w="3"/><text x="62.5577%" y="799.50">[..</text></g><g><title>[unknown] (3 samples, 2.31%)</title><rect x="62.3077%" y="773" width="2.3077%" height="15" fill="rgb(241,35,35)" fg:x="81" fg:w="3"/><text x="62.5577%" y="783.50">[..</text></g><g><title>[unknown] (3 samples, 2.31%)</title><rect x="62.3077%" y="757" width="2.3077%" height="15" fill="rgb(243,32,47)" fg:x="81" fg:w="3"/><text x="62.5577%" y="767.50">[..</text></g><g><title>[unknown] (2 samples, 1.54%)</title><rect x="63.0769%" y="741" width="1.5385%" height="15" fill="rgb(247,202,23)" fg:x="82" fg:w="2"/><text x="63.3269%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="63.8462%" y="725" width="0.7692%" height="15" fill="rgb(219,102,11)" fg:x="83" fg:w="1"/><text x="64.0962%" y="735.50"></text></g><g><title>__GI___mprotect (1 samples, 0.77%)</title><rect x="64.6154%" y="901" width="0.7692%" height="15" fill="rgb(243,110,44)" fg:x="84" fg:w="1"/><text x="64.8654%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="64.6154%" y="885" width="0.7692%" height="15" fill="rgb(222,74,54)" fg:x="84" fg:w="1"/><text x="64.8654%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="64.6154%" y="869" width="0.7692%" height="15" fill="rgb(216,99,12)" fg:x="84" fg:w="1"/><text x="64.8654%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="64.6154%" y="853" width="0.7692%" height="15" fill="rgb(226,22,26)" fg:x="84" fg:w="1"/><text x="64.8654%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="64.6154%" y="837" width="0.7692%" height="15" fill="rgb(217,163,10)" fg:x="84" fg:w="1"/><text x="64.8654%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="64.6154%" y="821" width="0.7692%" height="15" fill="rgb(213,25,53)" fg:x="84" fg:w="1"/><text x="64.8654%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="64.6154%" y="805" width="0.7692%" height="15" fill="rgb(252,105,26)" fg:x="84" fg:w="1"/><text x="64.8654%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="64.6154%" y="789" width="0.7692%" height="15" fill="rgb(220,39,43)" fg:x="84" fg:w="1"/><text x="64.8654%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="64.6154%" y="773" width="0.7692%" height="15" fill="rgb(229,68,48)" fg:x="84" fg:w="1"/><text x="64.8654%" y="783.50"></text></g><g><title>__clone3 (6 samples, 4.62%)</title><rect x="61.5385%" y="1013" width="4.6154%" height="15" fill="rgb(252,8,32)" fg:x="80" fg:w="6"/><text x="61.7885%" y="1023.50">__clo..</text></g><g><title>start_thread (6 samples, 4.62%)</title><rect x="61.5385%" y="997" width="4.6154%" height="15" fill="rgb(223,20,43)" fg:x="80" fg:w="6"/><text x="61.7885%" y="1007.50">start..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (6 samples, 4.62%)</title><rect x="61.5385%" y="981" width="4.6154%" height="15" fill="rgb(229,81,49)" fg:x="80" fg:w="6"/><text x="61.7885%" y="991.50">std::..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (5 samples, 3.85%)</title><rect x="62.3077%" y="965" width="3.8462%" height="15" fill="rgb(236,28,36)" fg:x="81" fg:w="5"/><text x="62.5577%" y="975.50">std:..</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (5 samples, 3.85%)</title><rect x="62.3077%" y="949" width="3.8462%" height="15" fill="rgb(249,185,26)" fg:x="81" fg:w="5"/><text x="62.5577%" y="959.50">std:..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (5 samples, 3.85%)</title><rect x="62.3077%" y="933" width="3.8462%" height="15" fill="rgb(249,174,33)" fg:x="81" fg:w="5"/><text x="62.5577%" y="943.50">std:..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (5 samples, 3.85%)</title><rect x="62.3077%" y="917" width="3.8462%" height="15" fill="rgb(233,201,37)" fg:x="81" fg:w="5"/><text x="62.5577%" y="927.50">std:..</text></g><g><title>std::sys::unix::os::page_size (1 samples, 0.77%)</title><rect x="65.3846%" y="901" width="0.7692%" height="15" fill="rgb(221,78,26)" fg:x="85" fg:w="1"/><text x="65.6346%" y="911.50"></text></g><g><title>__GI___sysconf (1 samples, 0.77%)</title><rect x="65.3846%" y="885" width="0.7692%" height="15" fill="rgb(250,127,30)" fg:x="85" fg:w="1"/><text x="65.6346%" y="895.50"></text></g><g><title>linux_sysconf (1 samples, 0.77%)</title><rect x="65.3846%" y="869" width="0.7692%" height="15" fill="rgb(230,49,44)" fg:x="85" fg:w="1"/><text x="65.6346%" y="879.50"></text></g><g><title>posix_sysconf (1 samples, 0.77%)</title><rect x="65.3846%" y="853" width="0.7692%" height="15" fill="rgb(229,67,23)" fg:x="85" fg:w="1"/><text x="65.6346%" y="863.50"></text></g><g><title>demo-axum (87 samples, 66.92%)</title><rect x="0.0000%" y="1029" width="66.9231%" height="15" fill="rgb(249,83,47)" fg:x="0" fg:w="87"/><text x="0.2500%" y="1039.50">demo-axum</text></g><g><title>_start (1 samples, 0.77%)</title><rect x="66.1538%" y="1013" width="0.7692%" height="15" fill="rgb(215,43,3)" fg:x="86" fg:w="1"/><text x="66.4038%" y="1023.50"></text></g><g><title>_dl_start (1 samples, 0.77%)</title><rect x="66.1538%" y="997" width="0.7692%" height="15" fill="rgb(238,154,13)" fg:x="86" fg:w="1"/><text x="66.4038%" y="1007.50"></text></g><g><title>_dl_start_final (1 samples, 0.77%)</title><rect x="66.1538%" y="981" width="0.7692%" height="15" fill="rgb(219,56,2)" fg:x="86" fg:w="1"/><text x="66.4038%" y="991.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.77%)</title><rect x="66.1538%" y="965" width="0.7692%" height="15" fill="rgb(233,0,4)" fg:x="86" fg:w="1"/><text x="66.4038%" y="975.50"></text></g><g><title>dl_main (1 samples, 0.77%)</title><rect x="66.1538%" y="949" width="0.7692%" height="15" fill="rgb(235,30,7)" fg:x="86" fg:w="1"/><text x="66.4038%" y="959.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.77%)</title><rect x="66.1538%" y="933" width="0.7692%" height="15" fill="rgb(250,79,13)" fg:x="86" fg:w="1"/><text x="66.4038%" y="943.50"></text></g><g><title>elf_dynamic_do_Rela (1 samples, 0.77%)</title><rect x="66.1538%" y="917" width="0.7692%" height="15" fill="rgb(211,146,34)" fg:x="86" fg:w="1"/><text x="66.4038%" y="927.50"></text></g><g><title>elf_machine_rela (1 samples, 0.77%)</title><rect x="66.1538%" y="901" width="0.7692%" height="15" fill="rgb(228,22,38)" fg:x="86" fg:w="1"/><text x="66.4038%" y="911.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.77%)</title><rect x="66.1538%" y="885" width="0.7692%" height="15" fill="rgb(235,168,5)" fg:x="86" fg:w="1"/><text x="66.4038%" y="895.50"></text></g><g><title>do_lookup_x (1 samples, 0.77%)</title><rect x="66.1538%" y="869" width="0.7692%" height="15" fill="rgb(221,155,16)" fg:x="86" fg:w="1"/><text x="66.4038%" y="879.50"></text></g><g><title>perf-exec (5 samples, 3.85%)</title><rect x="66.9231%" y="1029" width="3.8462%" height="15" fill="rgb(215,215,53)" fg:x="87" fg:w="5"/><text x="67.1731%" y="1039.50">perf..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="66.9231%" y="1013" width="3.8462%" height="15" fill="rgb(223,4,10)" fg:x="87" fg:w="5"/><text x="67.1731%" y="1023.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="66.9231%" y="997" width="3.8462%" height="15" fill="rgb(234,103,6)" fg:x="87" fg:w="5"/><text x="67.1731%" y="1007.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="66.9231%" y="981" width="3.8462%" height="15" fill="rgb(227,97,0)" fg:x="87" fg:w="5"/><text x="67.1731%" y="991.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="66.9231%" y="965" width="3.8462%" height="15" fill="rgb(234,150,53)" fg:x="87" fg:w="5"/><text x="67.1731%" y="975.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="66.9231%" y="949" width="3.8462%" height="15" fill="rgb(228,201,54)" fg:x="87" fg:w="5"/><text x="67.1731%" y="959.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="66.9231%" y="933" width="3.8462%" height="15" fill="rgb(222,22,37)" fg:x="87" fg:w="5"/><text x="67.1731%" y="943.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="66.9231%" y="917" width="3.8462%" height="15" fill="rgb(237,53,32)" fg:x="87" fg:w="5"/><text x="67.1731%" y="927.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="66.9231%" y="901" width="3.8462%" height="15" fill="rgb(233,25,53)" fg:x="87" fg:w="5"/><text x="67.1731%" y="911.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="66.9231%" y="885" width="3.8462%" height="15" fill="rgb(210,40,34)" fg:x="87" fg:w="5"/><text x="67.1731%" y="895.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="66.9231%" y="869" width="3.8462%" height="15" fill="rgb(241,220,44)" fg:x="87" fg:w="5"/><text x="67.1731%" y="879.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="66.9231%" y="853" width="3.8462%" height="15" fill="rgb(235,28,35)" fg:x="87" fg:w="5"/><text x="67.1731%" y="863.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="66.9231%" y="837" width="3.8462%" height="15" fill="rgb(210,56,17)" fg:x="87" fg:w="5"/><text x="67.1731%" y="847.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="66.9231%" y="821" width="3.8462%" height="15" fill="rgb(224,130,29)" fg:x="87" fg:w="5"/><text x="67.1731%" y="831.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="66.9231%" y="805" width="3.8462%" height="15" fill="rgb(235,212,8)" fg:x="87" fg:w="5"/><text x="67.1731%" y="815.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="66.9231%" y="789" width="3.8462%" height="15" fill="rgb(223,33,50)" fg:x="87" fg:w="5"/><text x="67.1731%" y="799.50">[unk..</text></g><g><title>&lt;sha2::core_api::Sha256VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core::{{closure}} (1 samples, 0.77%)</title><rect x="71.5385%" y="661" width="0.7692%" height="15" fill="rgb(219,149,13)" fg:x="93" fg:w="1"/><text x="71.7885%" y="671.50"></text></g><g><title>sha2::sha256::soft::compress (1 samples, 0.77%)</title><rect x="71.5385%" y="645" width="0.7692%" height="15" fill="rgb(250,156,29)" fg:x="93" fg:w="1"/><text x="71.7885%" y="655.50"></text></g><g><title>sha2::sha256::soft::sha256_digest_block_u32 (1 samples, 0.77%)</title><rect x="71.5385%" y="629" width="0.7692%" height="15" fill="rgb(216,193,19)" fg:x="93" fg:w="1"/><text x="71.7885%" y="639.50"></text></g><g><title>sha2::sha256::soft::sha256_digest_round_x2 (1 samples, 0.77%)</title><rect x="71.5385%" y="613" width="0.7692%" height="15" fill="rgb(216,135,14)" fg:x="93" fg:w="1"/><text x="71.7885%" y="623.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1 samples, 0.77%)</title><rect x="71.5385%" y="597" width="0.7692%" height="15" fill="rgb(241,47,5)" fg:x="93" fg:w="1"/><text x="71.7885%" y="607.50"></text></g><g><title>sha2::sha256::soft::schedule (1 samples, 0.77%)</title><rect x="73.0769%" y="629" width="0.7692%" height="15" fill="rgb(233,42,35)" fg:x="95" fg:w="1"/><text x="73.3269%" y="639.50"></text></g><g><title>sha2::sha256::soft::add (1 samples, 0.77%)</title><rect x="73.0769%" y="613" width="0.7692%" height="15" fill="rgb(231,13,6)" fg:x="95" fg:w="1"/><text x="73.3269%" y="623.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1 samples, 0.77%)</title><rect x="73.0769%" y="597" width="0.7692%" height="15" fill="rgb(207,181,40)" fg:x="95" fg:w="1"/><text x="73.3269%" y="607.50"></text></g><g><title>&lt;T as digest::mac::Mac&gt;::finalize (5 samples, 3.85%)</title><rect x="71.5385%" y="789" width="3.8462%" height="15" fill="rgb(254,173,49)" fg:x="93" fg:w="5"/><text x="71.7885%" y="799.50">&lt;T a..</text></g><g><title>digest::FixedOutput::finalize_fixed (5 samples, 3.85%)</title><rect x="71.5385%" y="773" width="3.8462%" height="15" fill="rgb(221,1,38)" fg:x="93" fg:w="5"/><text x="71.7885%" y="783.50">dige..</text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (5 samples, 3.85%)</title><rect x="71.5385%" y="757" width="3.8462%" height="15" fill="rgb(206,124,46)" fg:x="93" fg:w="5"/><text x="71.7885%" y="767.50">&lt;dig..</text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (5 samples, 3.85%)</title><rect x="71.5385%" y="741" width="3.8462%" height="15" fill="rgb(249,21,11)" fg:x="93" fg:w="5"/><text x="71.7885%" y="751.50">&lt;hma..</text></g><g><title>&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;T,OutSize,O&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (5 samples, 3.85%)</title><rect x="71.5385%" y="725" width="3.8462%" height="15" fill="rgb(222,201,40)" fg:x="93" fg:w="5"/><text x="71.7885%" y="735.50">&lt;dig..</text></g><g><title>&lt;sha2::core_api::Sha256VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core (5 samples, 3.85%)</title><rect x="71.5385%" y="709" width="3.8462%" height="15" fill="rgb(235,61,29)" fg:x="93" fg:w="5"/><text x="71.7885%" y="719.50">&lt;sha..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len64_padding_be (5 samples, 3.85%)</title><rect x="71.5385%" y="693" width="3.8462%" height="15" fill="rgb(219,207,3)" fg:x="93" fg:w="5"/><text x="71.7885%" y="703.50">bloc..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::digest_pad (5 samples, 3.85%)</title><rect x="71.5385%" y="677" width="3.8462%" height="15" fill="rgb(222,56,46)" fg:x="93" fg:w="5"/><text x="71.7885%" y="687.50">bloc..</text></g><g><title>sha2::sha256::soft::compress (4 samples, 3.08%)</title><rect x="72.3077%" y="661" width="3.0769%" height="15" fill="rgb(239,76,54)" fg:x="94" fg:w="4"/><text x="72.5577%" y="671.50">sha..</text></g><g><title>sha2::sha256::soft::sha256_digest_block_u32 (3 samples, 2.31%)</title><rect x="73.0769%" y="645" width="2.3077%" height="15" fill="rgb(231,124,27)" fg:x="95" fg:w="3"/><text x="73.3269%" y="655.50">s..</text></g><g><title>sha2::sha256::soft::sha256_digest_round_x2 (2 samples, 1.54%)</title><rect x="73.8462%" y="629" width="1.5385%" height="15" fill="rgb(249,195,6)" fg:x="96" fg:w="2"/><text x="74.0962%" y="639.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1 samples, 0.77%)</title><rect x="74.6154%" y="613" width="0.7692%" height="15" fill="rgb(237,174,47)" fg:x="97" fg:w="1"/><text x="74.8654%" y="623.50"></text></g><g><title>sqlx_core::postgres::connection::sasl::authenticate::{{closure}} (6 samples, 4.62%)</title><rect x="71.5385%" y="821" width="4.6154%" height="15" fill="rgb(206,201,31)" fg:x="93" fg:w="6"/><text x="71.7885%" y="831.50">sqlx_..</text></g><g><title>sqlx_core::postgres::connection::sasl::hi (6 samples, 4.62%)</title><rect x="71.5385%" y="805" width="4.6154%" height="15" fill="rgb(231,57,52)" fg:x="93" fg:w="6"/><text x="71.7885%" y="815.50">sqlx_..</text></g><g><title>&lt;T as digest::mac::Mac&gt;::new_from_slice (1 samples, 0.77%)</title><rect x="75.3846%" y="789" width="0.7692%" height="15" fill="rgb(248,177,22)" fg:x="98" fg:w="1"/><text x="75.6346%" y="799.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as crypto_common::KeyInit&gt;::new_from_slice (1 samples, 0.77%)</title><rect x="75.3846%" y="773" width="0.7692%" height="15" fill="rgb(215,211,37)" fg:x="98" fg:w="1"/><text x="75.6346%" y="783.50"></text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as crypto_common::KeyInit&gt;::new_from_slice (1 samples, 0.77%)</title><rect x="75.3846%" y="757" width="0.7692%" height="15" fill="rgb(241,128,51)" fg:x="98" fg:w="1"/><text x="75.6346%" y="767.50"></text></g><g><title>&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;T,OutSize,O&gt; as digest::core_api::UpdateCore&gt;::update_blocks (1 samples, 0.77%)</title><rect x="75.3846%" y="741" width="0.7692%" height="15" fill="rgb(227,165,31)" fg:x="98" fg:w="1"/><text x="75.6346%" y="751.50"></text></g><g><title>&lt;sha2::core_api::Sha256VarCore as digest::core_api::UpdateCore&gt;::update_blocks (1 samples, 0.77%)</title><rect x="75.3846%" y="725" width="0.7692%" height="15" fill="rgb(228,167,24)" fg:x="98" fg:w="1"/><text x="75.6346%" y="735.50"></text></g><g><title>sha2::sha256::soft::compress (1 samples, 0.77%)</title><rect x="75.3846%" y="709" width="0.7692%" height="15" fill="rgb(228,143,12)" fg:x="98" fg:w="1"/><text x="75.6346%" y="719.50"></text></g><g><title>sha2::sha256::soft::sha256_digest_block_u32 (1 samples, 0.77%)</title><rect x="75.3846%" y="693" width="0.7692%" height="15" fill="rgb(249,149,8)" fg:x="98" fg:w="1"/><text x="75.6346%" y="703.50"></text></g><g><title>sha2::sha256::soft::sha256_digest_round_x2 (1 samples, 0.77%)</title><rect x="75.3846%" y="677" width="0.7692%" height="15" fill="rgb(243,35,44)" fg:x="98" fg:w="1"/><text x="75.6346%" y="687.50"></text></g><g><title>[unknown] (9 samples, 6.92%)</title><rect x="70.7692%" y="1013" width="6.9231%" height="15" fill="rgb(246,89,9)" fg:x="92" fg:w="9"/><text x="71.0192%" y="1023.50">[unknown]</text></g><g><title>sqlx_core::pool::inner::spawn_maintenance_tasks::{{closure}} (9 samples, 6.92%)</title><rect x="70.7692%" y="997" width="6.9231%" height="15" fill="rgb(233,213,13)" fg:x="92" fg:w="9"/><text x="71.0192%" y="1007.50">sqlx_core..</text></g><g><title>sqlx_core::pool::CloseEvent::do_until::{{closure}} (9 samples, 6.92%)</title><rect x="70.7692%" y="981" width="6.9231%" height="15" fill="rgb(233,141,41)" fg:x="92" fg:w="9"/><text x="71.0192%" y="991.50">sqlx_core..</text></g><g><title>&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (9 samples, 6.92%)</title><rect x="70.7692%" y="965" width="6.9231%" height="15" fill="rgb(239,167,4)" fg:x="92" fg:w="9"/><text x="71.0192%" y="975.50">&lt;futures_..</text></g><g><title>sqlx_core::pool::CloseEvent::do_until::{{closure}}::{{closure}} (9 samples, 6.92%)</title><rect x="70.7692%" y="949" width="6.9231%" height="15" fill="rgb(209,217,16)" fg:x="92" fg:w="9"/><text x="71.0192%" y="959.50">sqlx_core..</text></g><g><title>sqlx_core::pool::inner::spawn_maintenance_tasks::{{closure}}::{{closure}} (9 samples, 6.92%)</title><rect x="70.7692%" y="933" width="6.9231%" height="15" fill="rgb(219,88,35)" fg:x="92" fg:w="9"/><text x="71.0192%" y="943.50">sqlx_core..</text></g><g><title>sqlx_core::pool::inner::PoolInner&lt;DB&gt;::min_connections_maintenance::{{closure}} (9 samples, 6.92%)</title><rect x="70.7692%" y="917" width="6.9231%" height="15" fill="rgb(220,193,23)" fg:x="92" fg:w="9"/><text x="71.0192%" y="927.50">sqlx_core..</text></g><g><title>sqlx_core::pool::inner::PoolInner&lt;DB&gt;::try_min_connections::{{closure}} (9 samples, 6.92%)</title><rect x="70.7692%" y="901" width="6.9231%" height="15" fill="rgb(230,90,52)" fg:x="92" fg:w="9"/><text x="71.0192%" y="911.50">sqlx_core..</text></g><g><title>sqlx_core::pool::inner::PoolInner&lt;DB&gt;::connect::{{closure}} (9 samples, 6.92%)</title><rect x="70.7692%" y="885" width="6.9231%" height="15" fill="rgb(252,106,19)" fg:x="92" fg:w="9"/><text x="71.0192%" y="895.50">sqlx_core..</text></g><g><title>&lt;tokio::time::timeout::Timeout&lt;T&gt; as core::future::future::Future&gt;::poll (8 samples, 6.15%)</title><rect x="71.5385%" y="869" width="6.1538%" height="15" fill="rgb(206,74,20)" fg:x="93" fg:w="8"/><text x="71.7885%" y="879.50">&lt;tokio::..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (8 samples, 6.15%)</title><rect x="71.5385%" y="853" width="6.1538%" height="15" fill="rgb(230,138,44)" fg:x="93" fg:w="8"/><text x="71.7885%" y="863.50">&lt;core::p..</text></g><g><title>sqlx_core::postgres::connection::establish::&lt;impl sqlx_core::postgres::connection::PgConnection&gt;::establish::{{closure}} (8 samples, 6.15%)</title><rect x="71.5385%" y="837" width="6.1538%" height="15" fill="rgb(235,182,43)" fg:x="93" fg:w="8"/><text x="71.7885%" y="847.50">sqlx_cor..</text></g><g><title>sqlx_core::postgres::connection::stream::PgStream::connect::{{closure}} (2 samples, 1.54%)</title><rect x="76.1538%" y="821" width="1.5385%" height="15" fill="rgb(242,16,51)" fg:x="99" fg:w="2"/><text x="76.4038%" y="831.50"></text></g><g><title>sqlx_core::net::socket::Socket::connect_tcp::{{closure}} (2 samples, 1.54%)</title><rect x="76.1538%" y="805" width="1.5385%" height="15" fill="rgb(248,9,4)" fg:x="99" fg:w="2"/><text x="76.4038%" y="815.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::connect::{{closure}} (2 samples, 1.54%)</title><rect x="76.1538%" y="789" width="1.5385%" height="15" fill="rgb(210,31,22)" fg:x="99" fg:w="2"/><text x="76.4038%" y="799.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::connect_addr::{{closure}} (2 samples, 1.54%)</title><rect x="76.1538%" y="773" width="1.5385%" height="15" fill="rgb(239,54,39)" fg:x="99" fg:w="2"/><text x="76.4038%" y="783.50"></text></g><g><title>mio::net::tcp::stream::TcpStream::connect (2 samples, 1.54%)</title><rect x="76.1538%" y="757" width="1.5385%" height="15" fill="rgb(230,99,41)" fg:x="99" fg:w="2"/><text x="76.4038%" y="767.50"></text></g><g><title>mio::sys::unix::tcp::connect (2 samples, 1.54%)</title><rect x="76.1538%" y="741" width="1.5385%" height="15" fill="rgb(253,106,12)" fg:x="99" fg:w="2"/><text x="76.4038%" y="751.50"></text></g><g><title>__libc_connect (2 samples, 1.54%)</title><rect x="76.1538%" y="725" width="1.5385%" height="15" fill="rgb(213,46,41)" fg:x="99" fg:w="2"/><text x="76.4038%" y="735.50"></text></g><g><title>[unknown] (2 samples, 1.54%)</title><rect x="76.1538%" y="709" width="1.5385%" height="15" fill="rgb(215,133,35)" fg:x="99" fg:w="2"/><text x="76.4038%" y="719.50"></text></g><g><title>[unknown] (2 samples, 1.54%)</title><rect x="76.1538%" y="693" width="1.5385%" height="15" fill="rgb(213,28,5)" fg:x="99" fg:w="2"/><text x="76.4038%" y="703.50"></text></g><g><title>[unknown] (2 samples, 1.54%)</title><rect x="76.1538%" y="677" width="1.5385%" height="15" fill="rgb(215,77,49)" fg:x="99" fg:w="2"/><text x="76.4038%" y="687.50"></text></g><g><title>[unknown] (2 samples, 1.54%)</title><rect x="76.1538%" y="661" width="1.5385%" height="15" fill="rgb(248,100,22)" fg:x="99" fg:w="2"/><text x="76.4038%" y="671.50"></text></g><g><title>[unknown] (2 samples, 1.54%)</title><rect x="76.1538%" y="645" width="1.5385%" height="15" fill="rgb(208,67,9)" fg:x="99" fg:w="2"/><text x="76.4038%" y="655.50"></text></g><g><title>[unknown] (2 samples, 1.54%)</title><rect x="76.1538%" y="629" width="1.5385%" height="15" fill="rgb(219,133,21)" fg:x="99" fg:w="2"/><text x="76.4038%" y="639.50"></text></g><g><title>[unknown] (2 samples, 1.54%)</title><rect x="76.1538%" y="613" width="1.5385%" height="15" fill="rgb(246,46,29)" fg:x="99" fg:w="2"/><text x="76.4038%" y="623.50"></text></g><g><title>[unknown] (2 samples, 1.54%)</title><rect x="76.1538%" y="597" width="1.5385%" height="15" fill="rgb(246,185,52)" fg:x="99" fg:w="2"/><text x="76.4038%" y="607.50"></text></g><g><title>[unknown] (2 samples, 1.54%)</title><rect x="76.1538%" y="581" width="1.5385%" height="15" fill="rgb(252,136,11)" fg:x="99" fg:w="2"/><text x="76.4038%" y="591.50"></text></g><g><title>[unknown] (2 samples, 1.54%)</title><rect x="76.1538%" y="565" width="1.5385%" height="15" fill="rgb(219,138,53)" fg:x="99" fg:w="2"/><text x="76.4038%" y="575.50"></text></g><g><title>[unknown] (2 samples, 1.54%)</title><rect x="76.1538%" y="549" width="1.5385%" height="15" fill="rgb(211,51,23)" fg:x="99" fg:w="2"/><text x="76.4038%" y="559.50"></text></g><g><title>[unknown] (2 samples, 1.54%)</title><rect x="76.1538%" y="533" width="1.5385%" height="15" fill="rgb(247,221,28)" fg:x="99" fg:w="2"/><text x="76.4038%" y="543.50"></text></g><g><title>[unknown] (2 samples, 1.54%)</title><rect x="76.1538%" y="517" width="1.5385%" height="15" fill="rgb(251,222,45)" fg:x="99" fg:w="2"/><text x="76.4038%" y="527.50"></text></g><g><title>[unknown] (2 samples, 1.54%)</title><rect x="76.1538%" y="501" width="1.5385%" height="15" fill="rgb(217,162,53)" fg:x="99" fg:w="2"/><text x="76.4038%" y="511.50"></text></g><g><title>[unknown] (2 samples, 1.54%)</title><rect x="76.1538%" y="485" width="1.5385%" height="15" fill="rgb(229,93,14)" fg:x="99" fg:w="2"/><text x="76.4038%" y="495.50"></text></g><g><title>[unknown] (2 samples, 1.54%)</title><rect x="76.1538%" y="469" width="1.5385%" height="15" fill="rgb(209,67,49)" fg:x="99" fg:w="2"/><text x="76.4038%" y="479.50"></text></g><g><title>[unknown] (2 samples, 1.54%)</title><rect x="76.1538%" y="453" width="1.5385%" height="15" fill="rgb(213,87,29)" fg:x="99" fg:w="2"/><text x="76.4038%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="76.9231%" y="437" width="0.7692%" height="15" fill="rgb(205,151,52)" fg:x="100" fg:w="1"/><text x="77.1731%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="76.9231%" y="421" width="0.7692%" height="15" fill="rgb(253,215,39)" fg:x="100" fg:w="1"/><text x="77.1731%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="76.9231%" y="405" width="0.7692%" height="15" fill="rgb(221,220,41)" fg:x="100" fg:w="1"/><text x="77.1731%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="76.9231%" y="389" width="0.7692%" height="15" fill="rgb(218,133,21)" fg:x="100" fg:w="1"/><text x="77.1731%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="76.9231%" y="373" width="0.7692%" height="15" fill="rgb(221,193,43)" fg:x="100" fg:w="1"/><text x="77.1731%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="76.9231%" y="357" width="0.7692%" height="15" fill="rgb(240,128,52)" fg:x="100" fg:w="1"/><text x="77.1731%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="76.9231%" y="341" width="0.7692%" height="15" fill="rgb(253,114,12)" fg:x="100" fg:w="1"/><text x="77.1731%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="76.9231%" y="325" width="0.7692%" height="15" fill="rgb(215,223,47)" fg:x="100" fg:w="1"/><text x="77.1731%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="76.9231%" y="309" width="0.7692%" height="15" fill="rgb(248,225,23)" fg:x="100" fg:w="1"/><text x="77.1731%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="76.9231%" y="293" width="0.7692%" height="15" fill="rgb(250,108,0)" fg:x="100" fg:w="1"/><text x="77.1731%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="76.9231%" y="277" width="0.7692%" height="15" fill="rgb(228,208,7)" fg:x="100" fg:w="1"/><text x="77.1731%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="76.9231%" y="261" width="0.7692%" height="15" fill="rgb(244,45,10)" fg:x="100" fg:w="1"/><text x="77.1731%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.77%)</title><rect x="76.9231%" y="245" width="0.7692%" height="15" fill="rgb(207,125,25)" fg:x="100" fg:w="1"/><text x="77.1731%" y="255.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (11 samples, 8.46%)</title><rect x="77.6923%" y="773" width="8.4615%" height="15" fill="rgb(210,195,18)" fg:x="101" fg:w="11"/><text x="77.9423%" y="783.50">tokio::loom:..</text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (11 samples, 8.46%)</title><rect x="77.6923%" y="757" width="8.4615%" height="15" fill="rgb(249,80,12)" fg:x="101" fg:w="11"/><text x="77.9423%" y="767.50">lock_api::mu..</text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (11 samples, 8.46%)</title><rect x="77.6923%" y="741" width="8.4615%" height="15" fill="rgb(221,65,9)" fg:x="101" fg:w="11"/><text x="77.9423%" y="751.50">&lt;parking_lot..</text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (11 samples, 8.46%)</title><rect x="77.6923%" y="725" width="8.4615%" height="15" fill="rgb(235,49,36)" fg:x="101" fg:w="11"/><text x="77.9423%" y="735.50">parking_lot:..</text></g><g><title>parking_lot_core::parking_lot::park (11 samples, 8.46%)</title><rect x="77.6923%" y="709" width="8.4615%" height="15" fill="rgb(225,32,20)" fg:x="101" fg:w="11"/><text x="77.9423%" y="719.50">parking_lot_..</text></g><g><title>parking_lot_core::parking_lot::with_thread_data (11 samples, 8.46%)</title><rect x="77.6923%" y="693" width="8.4615%" height="15" fill="rgb(215,141,46)" fg:x="101" fg:w="11"/><text x="77.9423%" y="703.50">parking_lot_..</text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (11 samples, 8.46%)</title><rect x="77.6923%" y="677" width="8.4615%" height="15" fill="rgb(250,160,47)" fg:x="101" fg:w="11"/><text x="77.9423%" y="687.50">parking_lot_..</text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (11 samples, 8.46%)</title><rect x="77.6923%" y="661" width="8.4615%" height="15" fill="rgb(216,222,40)" fg:x="101" fg:w="11"/><text x="77.9423%" y="671.50">&lt;parking_lot..</text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (11 samples, 8.46%)</title><rect x="77.6923%" y="645" width="8.4615%" height="15" fill="rgb(234,217,39)" fg:x="101" fg:w="11"/><text x="77.9423%" y="655.50">parking_lot_..</text></g><g><title>syscall (11 samples, 8.46%)</title><rect x="77.6923%" y="629" width="8.4615%" height="15" fill="rgb(207,178,40)" fg:x="101" fg:w="11"/><text x="77.9423%" y="639.50">syscall</text></g><g><title>[unknown] (11 samples, 8.46%)</title><rect x="77.6923%" y="613" width="8.4615%" height="15" fill="rgb(221,136,13)" fg:x="101" fg:w="11"/><text x="77.9423%" y="623.50">[unknown]</text></g><g><title>[unknown] (11 samples, 8.46%)</title><rect x="77.6923%" y="597" width="8.4615%" height="15" fill="rgb(249,199,10)" fg:x="101" fg:w="11"/><text x="77.9423%" y="607.50">[unknown]</text></g><g><title>[unknown] (11 samples, 8.46%)</title><rect x="77.6923%" y="581" width="8.4615%" height="15" fill="rgb(249,222,13)" fg:x="101" fg:w="11"/><text x="77.9423%" y="591.50">[unknown]</text></g><g><title>[unknown] (11 samples, 8.46%)</title><rect x="77.6923%" y="565" width="8.4615%" height="15" fill="rgb(244,185,38)" fg:x="101" fg:w="11"/><text x="77.9423%" y="575.50">[unknown]</text></g><g><title>[unknown] (11 samples, 8.46%)</title><rect x="77.6923%" y="549" width="8.4615%" height="15" fill="rgb(236,202,9)" fg:x="101" fg:w="11"/><text x="77.9423%" y="559.50">[unknown]</text></g><g><title>[unknown] (11 samples, 8.46%)</title><rect x="77.6923%" y="533" width="8.4615%" height="15" fill="rgb(250,229,37)" fg:x="101" fg:w="11"/><text x="77.9423%" y="543.50">[unknown]</text></g><g><title>[unknown] (11 samples, 8.46%)</title><rect x="77.6923%" y="517" width="8.4615%" height="15" fill="rgb(206,174,23)" fg:x="101" fg:w="11"/><text x="77.9423%" y="527.50">[unknown]</text></g><g><title>[unknown] (11 samples, 8.46%)</title><rect x="77.6923%" y="501" width="8.4615%" height="15" fill="rgb(211,33,43)" fg:x="101" fg:w="11"/><text x="77.9423%" y="511.50">[unknown]</text></g><g><title>[unknown] (11 samples, 8.46%)</title><rect x="77.6923%" y="485" width="8.4615%" height="15" fill="rgb(245,58,50)" fg:x="101" fg:w="11"/><text x="77.9423%" y="495.50">[unknown]</text></g><g><title>[unknown] (11 samples, 8.46%)</title><rect x="77.6923%" y="469" width="8.4615%" height="15" fill="rgb(244,68,36)" fg:x="101" fg:w="11"/><text x="77.9423%" y="479.50">[unknown]</text></g><g><title>[unknown] (11 samples, 8.46%)</title><rect x="77.6923%" y="453" width="8.4615%" height="15" fill="rgb(232,229,15)" fg:x="101" fg:w="11"/><text x="77.9423%" y="463.50">[unknown]</text></g><g><title>[unknown] (11 samples, 8.46%)</title><rect x="77.6923%" y="437" width="8.4615%" height="15" fill="rgb(254,30,23)" fg:x="101" fg:w="11"/><text x="77.9423%" y="447.50">[unknown]</text></g><g><title>[unknown] (11 samples, 8.46%)</title><rect x="77.6923%" y="421" width="8.4615%" height="15" fill="rgb(235,160,14)" fg:x="101" fg:w="11"/><text x="77.9423%" y="431.50">[unknown]</text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1 samples, 0.77%)</title><rect x="86.9231%" y="373" width="0.7692%" height="15" fill="rgb(212,155,44)" fg:x="113" fg:w="1"/><text x="87.1731%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.77%)</title><rect x="86.9231%" y="357" width="0.7692%" height="15" fill="rgb(226,2,50)" fg:x="113" fg:w="1"/><text x="87.1731%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_condvar (6 samples, 4.62%)</title><rect x="86.9231%" y="389" width="4.6154%" height="15" fill="rgb(234,177,6)" fg:x="113" fg:w="6"/><text x="87.1731%" y="399.50">tokio..</text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (5 samples, 3.85%)</title><rect x="87.6923%" y="373" width="3.8462%" height="15" fill="rgb(217,24,9)" fg:x="114" fg:w="5"/><text x="87.9423%" y="383.50">toki..</text></g><g><title>parking_lot::condvar::Condvar::wait (5 samples, 3.85%)</title><rect x="87.6923%" y="357" width="3.8462%" height="15" fill="rgb(220,13,46)" fg:x="114" fg:w="5"/><text x="87.9423%" y="367.50">park..</text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (5 samples, 3.85%)</title><rect x="87.6923%" y="341" width="3.8462%" height="15" fill="rgb(239,221,27)" fg:x="114" fg:w="5"/><text x="87.9423%" y="351.50">park..</text></g><g><title>parking_lot_core::parking_lot::park (5 samples, 3.85%)</title><rect x="87.6923%" y="325" width="3.8462%" height="15" fill="rgb(222,198,25)" fg:x="114" fg:w="5"/><text x="87.9423%" y="335.50">park..</text></g><g><title>parking_lot_core::parking_lot::with_thread_data (5 samples, 3.85%)</title><rect x="87.6923%" y="309" width="3.8462%" height="15" fill="rgb(211,99,13)" fg:x="114" fg:w="5"/><text x="87.9423%" y="319.50">park..</text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (5 samples, 3.85%)</title><rect x="87.6923%" y="293" width="3.8462%" height="15" fill="rgb(232,111,31)" fg:x="114" fg:w="5"/><text x="87.9423%" y="303.50">park..</text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (5 samples, 3.85%)</title><rect x="87.6923%" y="277" width="3.8462%" height="15" fill="rgb(245,82,37)" fg:x="114" fg:w="5"/><text x="87.9423%" y="287.50">&lt;par..</text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (5 samples, 3.85%)</title><rect x="87.6923%" y="261" width="3.8462%" height="15" fill="rgb(227,149,46)" fg:x="114" fg:w="5"/><text x="87.9423%" y="271.50">park..</text></g><g><title>syscall (5 samples, 3.85%)</title><rect x="87.6923%" y="245" width="3.8462%" height="15" fill="rgb(218,36,50)" fg:x="114" fg:w="5"/><text x="87.9423%" y="255.50">sysc..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="87.6923%" y="229" width="3.8462%" height="15" fill="rgb(226,80,48)" fg:x="114" fg:w="5"/><text x="87.9423%" y="239.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="87.6923%" y="213" width="3.8462%" height="15" fill="rgb(238,224,15)" fg:x="114" fg:w="5"/><text x="87.9423%" y="223.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="87.6923%" y="197" width="3.8462%" height="15" fill="rgb(241,136,10)" fg:x="114" fg:w="5"/><text x="87.9423%" y="207.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="87.6923%" y="181" width="3.8462%" height="15" fill="rgb(208,32,45)" fg:x="114" fg:w="5"/><text x="87.9423%" y="191.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="87.6923%" y="165" width="3.8462%" height="15" fill="rgb(207,135,9)" fg:x="114" fg:w="5"/><text x="87.9423%" y="175.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="87.6923%" y="149" width="3.8462%" height="15" fill="rgb(206,86,44)" fg:x="114" fg:w="5"/><text x="87.9423%" y="159.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="87.6923%" y="133" width="3.8462%" height="15" fill="rgb(245,177,15)" fg:x="114" fg:w="5"/><text x="87.9423%" y="143.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="87.6923%" y="117" width="3.8462%" height="15" fill="rgb(206,64,50)" fg:x="114" fg:w="5"/><text x="87.9423%" y="127.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="87.6923%" y="101" width="3.8462%" height="15" fill="rgb(234,36,40)" fg:x="114" fg:w="5"/><text x="87.9423%" y="111.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="87.6923%" y="85" width="3.8462%" height="15" fill="rgb(213,64,8)" fg:x="114" fg:w="5"/><text x="87.9423%" y="95.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="87.6923%" y="69" width="3.8462%" height="15" fill="rgb(210,75,36)" fg:x="114" fg:w="5"/><text x="87.9423%" y="79.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="87.6923%" y="53" width="3.8462%" height="15" fill="rgb(229,88,21)" fg:x="114" fg:w="5"/><text x="87.9423%" y="63.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.85%)</title><rect x="87.6923%" y="37" width="3.8462%" height="15" fill="rgb(252,204,47)" fg:x="114" fg:w="5"/><text x="87.9423%" y="47.50">[unk..</text></g><g><title>all (130 samples, 100%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(208,77,27)" fg:x="0" fg:w="130"/><text x="0.2500%" y="1055.50"></text></g><g><title>tokio-runtime-w (38 samples, 29.23%)</title><rect x="70.7692%" y="1029" width="29.2308%" height="15" fill="rgb(221,76,26)" fg:x="92" fg:w="38"/><text x="71.0192%" y="1039.50">tokio-runtime-w</text></g><g><title>__clone3 (29 samples, 22.31%)</title><rect x="77.6923%" y="1013" width="22.3077%" height="15" fill="rgb(225,139,18)" fg:x="101" fg:w="29"/><text x="77.9423%" y="1023.50">__clone3</text></g><g><title>start_thread (29 samples, 22.31%)</title><rect x="77.6923%" y="997" width="22.3077%" height="15" fill="rgb(230,137,11)" fg:x="101" fg:w="29"/><text x="77.9423%" y="1007.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (29 samples, 22.31%)</title><rect x="77.6923%" y="981" width="22.3077%" height="15" fill="rgb(212,28,1)" fg:x="101" fg:w="29"/><text x="77.9423%" y="991.50">std::sys::unix::thread::Thread::new..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (29 samples, 22.31%)</title><rect x="77.6923%" y="965" width="22.3077%" height="15" fill="rgb(248,164,17)" fg:x="101" fg:w="29"/><text x="77.9423%" y="975.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::op..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (29 samples, 22.31%)</title><rect x="77.6923%" y="949" width="22.3077%" height="15" fill="rgb(222,171,42)" fg:x="101" fg:w="29"/><text x="77.9423%" y="959.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::op..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (29 samples, 22.31%)</title><rect x="77.6923%" y="933" width="22.3077%" height="15" fill="rgb(243,84,45)" fg:x="101" fg:w="29"/><text x="77.9423%" y="943.50">core::ops::function::FnOnce::call_o..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (29 samples, 22.31%)</title><rect x="77.6923%" y="917" width="22.3077%" height="15" fill="rgb(252,49,23)" fg:x="101" fg:w="29"/><text x="77.9423%" y="927.50">std::thread::Builder::spawn_uncheck..</text></g><g><title>std::panic::catch_unwind (29 samples, 22.31%)</title><rect x="77.6923%" y="901" width="22.3077%" height="15" fill="rgb(215,19,7)" fg:x="101" fg:w="29"/><text x="77.9423%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (29 samples, 22.31%)</title><rect x="77.6923%" y="885" width="22.3077%" height="15" fill="rgb(238,81,41)" fg:x="101" fg:w="29"/><text x="77.9423%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (29 samples, 22.31%)</title><rect x="77.6923%" y="869" width="22.3077%" height="15" fill="rgb(210,199,37)" fg:x="101" fg:w="29"/><text x="77.9423%" y="879.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (29 samples, 22.31%)</title><rect x="77.6923%" y="853" width="22.3077%" height="15" fill="rgb(244,192,49)" fg:x="101" fg:w="29"/><text x="77.9423%" y="863.50">&lt;core::panic::unwind_safe::AssertUn..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (29 samples, 22.31%)</title><rect x="77.6923%" y="837" width="22.3077%" height="15" fill="rgb(226,211,11)" fg:x="101" fg:w="29"/><text x="77.9423%" y="847.50">std::thread::Builder::spawn_uncheck..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (29 samples, 22.31%)</title><rect x="77.6923%" y="821" width="22.3077%" height="15" fill="rgb(236,162,54)" fg:x="101" fg:w="29"/><text x="77.9423%" y="831.50">std::sys_common::backtrace::__rust_..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (29 samples, 22.31%)</title><rect x="77.6923%" y="805" width="22.3077%" height="15" fill="rgb(220,229,9)" fg:x="101" fg:w="29"/><text x="77.9423%" y="815.50">tokio::runtime::blocking::pool::Spa..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (29 samples, 22.31%)</title><rect x="77.6923%" y="789" width="22.3077%" height="15" fill="rgb(250,87,22)" fg:x="101" fg:w="29"/><text x="77.9423%" y="799.50">tokio::runtime::blocking::pool::Inn..</text></g><g><title>tokio::runtime::blocking::pool::Task::run (18 samples, 13.85%)</title><rect x="86.1538%" y="773" width="13.8462%" height="15" fill="rgb(239,43,17)" fg:x="112" fg:w="18"/><text x="86.4038%" y="783.50">tokio::runtime::block..</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (18 samples, 13.85%)</title><rect x="86.1538%" y="757" width="13.8462%" height="15" fill="rgb(231,177,25)" fg:x="112" fg:w="18"/><text x="86.4038%" y="767.50">tokio::runtime::task:..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (18 samples, 13.85%)</title><rect x="86.1538%" y="741" width="13.8462%" height="15" fill="rgb(219,179,1)" fg:x="112" fg:w="18"/><text x="86.4038%" y="751.50">tokio::runtime::task:..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (18 samples, 13.85%)</title><rect x="86.1538%" y="725" width="13.8462%" height="15" fill="rgb(238,219,53)" fg:x="112" fg:w="18"/><text x="86.4038%" y="735.50">tokio::runtime::task:..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (18 samples, 13.85%)</title><rect x="86.1538%" y="709" width="13.8462%" height="15" fill="rgb(232,167,36)" fg:x="112" fg:w="18"/><text x="86.4038%" y="719.50">tokio::runtime::task:..</text></g><g><title>tokio::runtime::task::harness::poll_future (18 samples, 13.85%)</title><rect x="86.1538%" y="693" width="13.8462%" height="15" fill="rgb(244,19,51)" fg:x="112" fg:w="18"/><text x="86.4038%" y="703.50">tokio::runtime::task:..</text></g><g><title>std::panic::catch_unwind (18 samples, 13.85%)</title><rect x="86.1538%" y="677" width="13.8462%" height="15" fill="rgb(224,6,22)" fg:x="112" fg:w="18"/><text x="86.4038%" y="687.50">std::panic::catch_unw..</text></g><g><title>std::panicking::try (18 samples, 13.85%)</title><rect x="86.1538%" y="661" width="13.8462%" height="15" fill="rgb(224,145,5)" fg:x="112" fg:w="18"/><text x="86.4038%" y="671.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (18 samples, 13.85%)</title><rect x="86.1538%" y="645" width="13.8462%" height="15" fill="rgb(234,130,49)" fg:x="112" fg:w="18"/><text x="86.4038%" y="655.50">std::panicking::try::..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (18 samples, 13.85%)</title><rect x="86.1538%" y="629" width="13.8462%" height="15" fill="rgb(254,6,2)" fg:x="112" fg:w="18"/><text x="86.4038%" y="639.50">&lt;core::panic::unwind_..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (18 samples, 13.85%)</title><rect x="86.1538%" y="613" width="13.8462%" height="15" fill="rgb(208,96,46)" fg:x="112" fg:w="18"/><text x="86.4038%" y="623.50">tokio::runtime::task:..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (18 samples, 13.85%)</title><rect x="86.1538%" y="597" width="13.8462%" height="15" fill="rgb(239,3,39)" fg:x="112" fg:w="18"/><text x="86.4038%" y="607.50">tokio::runtime::task:..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (18 samples, 13.85%)</title><rect x="86.1538%" y="581" width="13.8462%" height="15" fill="rgb(233,210,1)" fg:x="112" fg:w="18"/><text x="86.4038%" y="591.50">tokio::loom::std::uns..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (18 samples, 13.85%)</title><rect x="86.1538%" y="565" width="13.8462%" height="15" fill="rgb(244,137,37)" fg:x="112" fg:w="18"/><text x="86.4038%" y="575.50">tokio::runtime::task:..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (18 samples, 13.85%)</title><rect x="86.1538%" y="549" width="13.8462%" height="15" fill="rgb(240,136,2)" fg:x="112" fg:w="18"/><text x="86.4038%" y="559.50">&lt;tokio::runtime::bloc..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}} (18 samples, 13.85%)</title><rect x="86.1538%" y="533" width="13.8462%" height="15" fill="rgb(239,18,37)" fg:x="112" fg:w="18"/><text x="86.4038%" y="543.50">tokio::runtime::sched..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (18 samples, 13.85%)</title><rect x="86.1538%" y="517" width="13.8462%" height="15" fill="rgb(218,185,22)" fg:x="112" fg:w="18"/><text x="86.4038%" y="527.50">tokio::runtime::sched..</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (18 samples, 13.85%)</title><rect x="86.1538%" y="501" width="13.8462%" height="15" fill="rgb(225,218,4)" fg:x="112" fg:w="18"/><text x="86.4038%" y="511.50">tokio::macros::scoped..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}} (18 samples, 13.85%)</title><rect x="86.1538%" y="485" width="13.8462%" height="15" fill="rgb(230,182,32)" fg:x="112" fg:w="18"/><text x="86.4038%" y="495.50">tokio::runtime::sched..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (18 samples, 13.85%)</title><rect x="86.1538%" y="469" width="13.8462%" height="15" fill="rgb(242,56,43)" fg:x="112" fg:w="18"/><text x="86.4038%" y="479.50">tokio::runtime::sched..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (18 samples, 13.85%)</title><rect x="86.1538%" y="453" width="13.8462%" height="15" fill="rgb(233,99,24)" fg:x="112" fg:w="18"/><text x="86.4038%" y="463.50">tokio::runtime::sched..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (17 samples, 13.08%)</title><rect x="86.9231%" y="437" width="13.0769%" height="15" fill="rgb(234,209,42)" fg:x="113" fg:w="17"/><text x="87.1731%" y="447.50">tokio::runtime::sche..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (17 samples, 13.08%)</title><rect x="86.9231%" y="421" width="13.0769%" height="15" fill="rgb(227,7,12)" fg:x="113" fg:w="17"/><text x="87.1731%" y="431.50">tokio::runtime::sche..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (17 samples, 13.08%)</title><rect x="86.9231%" y="405" width="13.0769%" height="15" fill="rgb(245,203,43)" fg:x="113" fg:w="17"/><text x="87.1731%" y="415.50">tokio::runtime::sche..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_driver (11 samples, 8.46%)</title><rect x="91.5385%" y="389" width="8.4615%" height="15" fill="rgb(238,205,33)" fg:x="119" fg:w="11"/><text x="91.7885%" y="399.50">tokio::runti..</text></g><g><title>tokio::runtime::time::Driver::park_internal (11 samples, 8.46%)</title><rect x="91.5385%" y="373" width="8.4615%" height="15" fill="rgb(231,56,7)" fg:x="119" fg:w="11"/><text x="91.7885%" y="383.50">tokio::runti..</text></g><g><title>tokio::runtime::io::Driver::turn (11 samples, 8.46%)</title><rect x="91.5385%" y="357" width="8.4615%" height="15" fill="rgb(244,186,29)" fg:x="119" fg:w="11"/><text x="91.7885%" y="367.50">tokio::runti..</text></g><g><title>mio::poll::Poll::poll (11 samples, 8.46%)</title><rect x="91.5385%" y="341" width="8.4615%" height="15" fill="rgb(234,111,31)" fg:x="119" fg:w="11"/><text x="91.7885%" y="351.50">mio::poll::P..</text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (11 samples, 8.46%)</title><rect x="91.5385%" y="325" width="8.4615%" height="15" fill="rgb(241,149,10)" fg:x="119" fg:w="11"/><text x="91.7885%" y="335.50">mio::sys::un..</text></g><g><title>epoll_wait (11 samples, 8.46%)</title><rect x="91.5385%" y="309" width="8.4615%" height="15" fill="rgb(249,206,44)" fg:x="119" fg:w="11"/><text x="91.7885%" y="319.50">epoll_wait</text></g><g><title>[unknown] (11 samples, 8.46%)</title><rect x="91.5385%" y="293" width="8.4615%" height="15" fill="rgb(251,153,30)" fg:x="119" fg:w="11"/><text x="91.7885%" y="303.50">[unknown]</text></g><g><title>[unknown] (11 samples, 8.46%)</title><rect x="91.5385%" y="277" width="8.4615%" height="15" fill="rgb(239,152,38)" fg:x="119" fg:w="11"/><text x="91.7885%" y="287.50">[unknown]</text></g><g><title>[unknown] (11 samples, 8.46%)</title><rect x="91.5385%" y="261" width="8.4615%" height="15" fill="rgb(249,139,47)" fg:x="119" fg:w="11"/><text x="91.7885%" y="271.50">[unknown]</text></g><g><title>[unknown] (11 samples, 8.46%)</title><rect x="91.5385%" y="245" width="8.4615%" height="15" fill="rgb(244,64,35)" fg:x="119" fg:w="11"/><text x="91.7885%" y="255.50">[unknown]</text></g><g><title>[unknown] (11 samples, 8.46%)</title><rect x="91.5385%" y="229" width="8.4615%" height="15" fill="rgb(216,46,15)" fg:x="119" fg:w="11"/><text x="91.7885%" y="239.50">[unknown]</text></g><g><title>[unknown] (11 samples, 8.46%)</title><rect x="91.5385%" y="213" width="8.4615%" height="15" fill="rgb(250,74,19)" fg:x="119" fg:w="11"/><text x="91.7885%" y="223.50">[unknown]</text></g><g><title>[unknown] (11 samples, 8.46%)</title><rect x="91.5385%" y="197" width="8.4615%" height="15" fill="rgb(249,42,33)" fg:x="119" fg:w="11"/><text x="91.7885%" y="207.50">[unknown]</text></g><g><title>[unknown] (11 samples, 8.46%)</title><rect x="91.5385%" y="181" width="8.4615%" height="15" fill="rgb(242,149,17)" fg:x="119" fg:w="11"/><text x="91.7885%" y="191.50">[unknown]</text></g><g><title>[unknown] (11 samples, 8.46%)</title><rect x="91.5385%" y="165" width="8.4615%" height="15" fill="rgb(244,29,21)" fg:x="119" fg:w="11"/><text x="91.7885%" y="175.50">[unknown]</text></g><g><title>[unknown] (10 samples, 7.69%)</title><rect x="92.3077%" y="149" width="7.6923%" height="15" fill="rgb(220,130,37)" fg:x="120" fg:w="10"/><text x="92.5577%" y="159.50">[unknown]</text></g><g><title>[unknown] (10 samples, 7.69%)</title><rect x="92.3077%" y="133" width="7.6923%" height="15" fill="rgb(211,67,2)" fg:x="120" fg:w="10"/><text x="92.5577%" y="143.50">[unknown]</text></g><g><title>[unknown] (10 samples, 7.69%)</title><rect x="92.3077%" y="117" width="7.6923%" height="15" fill="rgb(235,68,52)" fg:x="120" fg:w="10"/><text x="92.5577%" y="127.50">[unknown]</text></g><g><title>[unknown] (10 samples, 7.69%)</title><rect x="92.3077%" y="101" width="7.6923%" height="15" fill="rgb(246,142,3)" fg:x="120" fg:w="10"/><text x="92.5577%" y="111.50">[unknown]</text></g><g><title>[unknown] (10 samples, 7.69%)</title><rect x="92.3077%" y="85" width="7.6923%" height="15" fill="rgb(241,25,7)" fg:x="120" fg:w="10"/><text x="92.5577%" y="95.50">[unknown]</text></g></svg></svg>